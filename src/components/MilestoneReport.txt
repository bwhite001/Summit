import { MilestonePlanningItem } from "../classes/MilestonePlanningItem";
import { TableCellLayout, DataGrid, DataGridBody, DataGridCell, DataGridHeader, DataGridHeaderCell, DataGridRow, FluentProvider, TableColumnDefinition, createTableColumn, teamsLightTheme } from "@fluentui/react-components";
import React from "react";

interface MilestoneReportTableProps {
  items: MilestonePlanningItem[];
  onUpdate: (items: MilestonePlanningItem[]) => void;
  sortState: Parameters<NonNullable<DataGridProps["onSortChange"]>>[1];
}

export class MilestoneReportTable extends React.Component<MilestoneReportTableProps> {
  columns: TableColumnDefinition<MilestonePlanningItem>[] = [
    createTableColumn<MilestonePlanningItem>({
      columnId: "name",
      compare: (a, b) => {
        return a.name.localeCompare(b.name);
      },
      renderHeaderCell: () => <b>Name</b>,
      renderCell: (item: MilestonePlanningItem) => {
        return <TableCellLayout>{item.name}</TableCellLayout>;
      },
    }),
    createTableColumn<MilestonePlanningItem>({
      columnId: "milestone",
      compare: (a, b) => {
        const aValue = a.milestone === "-" ? 0 : a.milestone;
        const bValue = b.milestone === "-" ? 0 : b.milestone;
        return aValue - bValue;
      },
      renderHeaderCell: () => <b>Milestone</b>,
      renderCell: (item: MilestonePlanningItem) => item.milestone,
    }),
    createTableColumn<MilestonePlanningItem>({
      columnId: "leads",
      compare: (a, b) => a.total_leads - b.total_leads,
      renderHeaderCell: () => <b>Leads</b>,
      renderCell: (item: MilestonePlanningItem) => item.total_leads,
    }),
    createTableColumn<MilestonePlanningItem>({
      columnId: "assists",
      compare: (a, b) => a.total_assists - b.total_assists,
      renderHeaderCell: () => <b>Assists</b>,
      renderCell: (item: MilestonePlanningItem) => item.total_assists,
    }),
    createTableColumn<MilestonePlanningItem>({
      columnId: "community",
      compare: (a, b) => a.community - b.community,
      renderHeaderCell: () => <b>Community</b>,
      renderCell: (item: MilestonePlanningItem) => item.community,
    }),
    createTableColumn<MilestonePlanningItem>({
      columnId: "creative",
      compare: (a, b) => a.creative - b.creative,
      renderHeaderCell: () => <b>Creative</b>,
      renderCell: (item: MilestonePlanningItem) => item.creative,
    }),
  ];

  constructor(props: MilestoneReportTableProps) {
    super(props);
    this.state = {
      items: props.items,
      sortState: { sortColumn: "file", sortDirection: "ascending" },
    };
  }

  onSortChange: DataGridProps["onSortChange"] = (e, nextSortState) => {
    this.setSortState(nextSortState);
  };

  setSortState = (nextSortState: Parameters<NonNullable<DataGridProps["onSortChange"]>>[1]) => {
    this.setState({ sortState: nextSortState });
  };

  render(): React.ReactNode {
    return (
      <FluentProvider theme={teamsLightTheme}>
        <DataGrid items={this.props.items} columns={this.columns} sortable sortState={this.props.sortState} onSortChange={this.onSortChange} getRowId={(item: MilestonePlanningItem) => item.name} focusMode="none" selectionAppearance="none">
          <DataGridHeader>
            <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>
          </DataGridHeader>
          <DataGridBody<MilestonePlanningItem>>
            {({ item, rowId }: { item: MilestonePlanningItem; rowId: string }) => (
              <DataGridRow<MilestonePlanningItem> key={rowId}>
                {({ renderCell }) => (
                  <DataGridCell align="center" valign="middle">
                    {renderCell(item)}
                  </DataGridCell>
                )}
              </DataGridRow>
            )}
          </DataGridBody>
        </DataGrid>
      </FluentProvider>
    ) as React.ReactNode;
  }
}
